/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Shop {
  export type ItemStruct = {
    itemId: BigNumberish;
    name: string;
    description: string;
    image: string;
    price: BigNumberish;
    inStock: boolean;
    isDeleted: boolean;
  };

  export type ItemStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    boolean,
    boolean
  ] & {
    itemId: BigNumber;
    name: string;
    description: string;
    image: string;
    price: BigNumber;
    inStock: boolean;
    isDeleted: boolean;
  };

  export type TransStruct = {
    transId: BigNumberish;
    itemIds: BigNumberish[];
    itemQty: BigNumberish[];
    total: BigNumberish;
    isValid: boolean;
  };

  export type TransStructOutput = [
    BigNumber,
    BigNumber[],
    BigNumber[],
    BigNumber,
    boolean
  ] & {
    transId: BigNumber;
    itemIds: BigNumber[];
    itemQty: BigNumber[];
    total: BigNumber;
    isValid: boolean;
  };
}

export interface ShopInterface extends utils.Interface {
  contractName: "Shop";
  functions: {
    "catalog(uint256)": FunctionFragment;
    "createItem(string,string,string,uint256)": FunctionFragment;
    "deleteItem(uint256)": FunctionFragment;
    "description()": FunctionFragment;
    "fetchCatalogItems()": FunctionFragment;
    "fetchTransactions()": FunctionFragment;
    "freeTransactions()": FunctionFragment;
    "governor()": FunctionFragment;
    "image()": FunctionFragment;
    "location()": FunctionFragment;
    "makeTransaction(uint256[],uint256[])": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "phone()": FunctionFragment;
    "selfDestruct()": FunctionFragment;
    "setFreeTransactions(uint256)": FunctionFragment;
    "setInStock(uint256,bool)": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "transactionsCount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "catalog",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createItem",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchCatalogItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freeTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "image", values?: undefined): string;
  encodeFunctionData(functionFragment: "location", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeTransaction",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "phone", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "selfDestruct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeTransactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInStock",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionsCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "catalog", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchCatalogItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "image", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "location", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phone", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfDestruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreeTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setInStock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionsCount",
    data: BytesLike
  ): Result;

  events: {
    "ItemCreated(uint256,string,string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemCreated"): EventFragment;
}

export type ItemCreatedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber],
  {
    itemId: BigNumber;
    name: string;
    description: string;
    image: string;
    price: BigNumber;
  }
>;

export type ItemCreatedEventFilter = TypedEventFilter<ItemCreatedEvent>;

export interface Shop extends BaseContract {
  contractName: "Shop";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    catalog(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, boolean, boolean] & {
        itemId: BigNumber;
        name: string;
        description: string;
        image: string;
        price: BigNumber;
        inStock: boolean;
        isDeleted: boolean;
      }
    >;

    createItem(
      _name: string,
      _description: string,
      _image: string,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteItem(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    description(overrides?: CallOverrides): Promise<[string]>;

    fetchCatalogItems(
      overrides?: CallOverrides
    ): Promise<[Shop.ItemStructOutput[]]>;

    fetchTransactions(
      overrides?: CallOverrides
    ): Promise<[Shop.TransStructOutput[]]>;

    freeTransactions(overrides?: CallOverrides): Promise<[BigNumber]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    image(overrides?: CallOverrides): Promise<[string]>;

    location(overrides?: CallOverrides): Promise<[string]>;

    makeTransaction(
      itemIds: BigNumberish[],
      itemQty: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    phone(overrides?: CallOverrides): Promise<[string]>;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFreeTransactions(
      _freeTransactions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInStock(
      itemId: BigNumberish,
      _inStock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        transId: BigNumber;
        total: BigNumber;
        isValid: boolean;
      }
    >;

    transactionsCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;
  };

  catalog(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, BigNumber, boolean, boolean] & {
      itemId: BigNumber;
      name: string;
      description: string;
      image: string;
      price: BigNumber;
      inStock: boolean;
      isDeleted: boolean;
    }
  >;

  createItem(
    _name: string,
    _description: string,
    _image: string,
    _price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteItem(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  description(overrides?: CallOverrides): Promise<string>;

  fetchCatalogItems(
    overrides?: CallOverrides
  ): Promise<Shop.ItemStructOutput[]>;

  fetchTransactions(
    overrides?: CallOverrides
  ): Promise<Shop.TransStructOutput[]>;

  freeTransactions(overrides?: CallOverrides): Promise<BigNumber>;

  governor(overrides?: CallOverrides): Promise<string>;

  image(overrides?: CallOverrides): Promise<string>;

  location(overrides?: CallOverrides): Promise<string>;

  makeTransaction(
    itemIds: BigNumberish[],
    itemQty: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  phone(overrides?: CallOverrides): Promise<string>;

  selfDestruct(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFreeTransactions(
    _freeTransactions: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInStock(
    itemId: BigNumberish,
    _inStock: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transactions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      transId: BigNumber;
      total: BigNumber;
      isValid: boolean;
    }
  >;

  transactionsCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    catalog(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, boolean, boolean] & {
        itemId: BigNumber;
        name: string;
        description: string;
        image: string;
        price: BigNumber;
        inStock: boolean;
        isDeleted: boolean;
      }
    >;

    createItem(
      _name: string,
      _description: string,
      _image: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteItem(itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    description(overrides?: CallOverrides): Promise<string>;

    fetchCatalogItems(
      overrides?: CallOverrides
    ): Promise<Shop.ItemStructOutput[]>;

    fetchTransactions(
      overrides?: CallOverrides
    ): Promise<Shop.TransStructOutput[]>;

    freeTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<string>;

    image(overrides?: CallOverrides): Promise<string>;

    location(overrides?: CallOverrides): Promise<string>;

    makeTransaction(
      itemIds: BigNumberish[],
      itemQty: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    phone(overrides?: CallOverrides): Promise<string>;

    selfDestruct(overrides?: CallOverrides): Promise<void>;

    setFreeTransactions(
      _freeTransactions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInStock(
      itemId: BigNumberish,
      _inStock: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        transId: BigNumber;
        total: BigNumber;
        isValid: boolean;
      }
    >;

    transactionsCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ItemCreated(uint256,string,string,string,uint256)"(
      itemId?: null,
      name?: null,
      description?: null,
      image?: null,
      price?: null
    ): ItemCreatedEventFilter;
    ItemCreated(
      itemId?: null,
      name?: null,
      description?: null,
      image?: null,
      price?: null
    ): ItemCreatedEventFilter;
  };

  estimateGas: {
    catalog(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    createItem(
      _name: string,
      _description: string,
      _image: string,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteItem(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    description(overrides?: CallOverrides): Promise<BigNumber>;

    fetchCatalogItems(overrides?: CallOverrides): Promise<BigNumber>;

    fetchTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    freeTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    image(overrides?: CallOverrides): Promise<BigNumber>;

    location(overrides?: CallOverrides): Promise<BigNumber>;

    makeTransaction(
      itemIds: BigNumberish[],
      itemQty: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    phone(overrides?: CallOverrides): Promise<BigNumber>;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFreeTransactions(
      _freeTransactions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInStock(
      itemId: BigNumberish,
      _inStock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionsCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    catalog(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createItem(
      _name: string,
      _description: string,
      _image: string,
      _price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteItem(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchCatalogItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchTransactions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freeTransactions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    image(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    location(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeTransaction(
      itemIds: BigNumberish[],
      itemQty: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    phone(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFreeTransactions(
      _freeTransactions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInStock(
      itemId: BigNumberish,
      _inStock: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
