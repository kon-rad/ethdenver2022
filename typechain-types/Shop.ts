/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ItemStruct = {
  itemId: BigNumberish;
  price: BigNumberish;
  isDeleted: boolean;
};

export type ItemStructOutput = [BigNumber, BigNumber, boolean] & {
  itemId: BigNumber;
  price: BigNumber;
  isDeleted: boolean;
};

export declare namespace Shop {
  export type TransStruct = {
    transId: BigNumberish;
    itemIds: BigNumberish[];
    itemQty: BigNumberish[];
    total: BigNumberish;
    isValid: boolean;
    client: string;
    review: BigNumberish;
    isReviewed: boolean;
    affPercentage: BigNumberish;
  };

  export type TransStructOutput = [
    BigNumber,
    BigNumber[],
    BigNumber[],
    BigNumber,
    boolean,
    string,
    BigNumber,
    boolean,
    BigNumber
  ] & {
    transId: BigNumber;
    itemIds: BigNumber[];
    itemQty: BigNumber[];
    total: BigNumber;
    isValid: boolean;
    client: string;
    review: BigNumber;
    isReviewed: boolean;
    affPercentage: BigNumber;
  };

  export type AffiliateStruct = {
    percentage: BigNumberish;
    affAddr: string;
    id: BigNumberish;
  };

  export type AffiliateStructOutput = [BigNumber, string, BigNumber] & {
    percentage: BigNumber;
    affAddr: string;
    id: BigNumber;
  };
}

export interface ShopInterface extends utils.Interface {
  contractName: "Shop";
  functions: {
    "affiliates(address)": FunctionFragment;
    "approveAffiliate(address)": FunctionFragment;
    "approvedAffArr(uint256)": FunctionFragment;
    "cancelAffiliate(address)": FunctionFragment;
    "createItem(uint256,string,string)": FunctionFragment;
    "deleteItem(uint256)": FunctionFragment;
    "fetchCatalogItems()": FunctionFragment;
    "fetchItemLink(uint256)": FunctionFragment;
    "fetchTransactions()": FunctionFragment;
    "freeTransactions()": FunctionFragment;
    "getApprovedAffiliates()": FunctionFragment;
    "getProposedAffiliates()": FunctionFragment;
    "giveReview(uint256,uint256)": FunctionFragment;
    "governor()": FunctionFragment;
    "image()": FunctionFragment;
    "makeTransaction(uint256[],uint256[],address)": FunctionFragment;
    "name()": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposeAffiliate(uint256)": FunctionFragment;
    "proposedAffArr(uint256)": FunctionFragment;
    "proposedAffiliates(address)": FunctionFragment;
    "selfDestruct()": FunctionFragment;
    "setFreeTransactions(uint256)": FunctionFragment;
    "setItemLink(uint256,string)": FunctionFragment;
    "shopId()": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "transactionsCount()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "affiliates", values: [string]): string;
  encodeFunctionData(
    functionFragment: "approveAffiliate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedAffArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAffiliate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createItem",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchCatalogItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchItemLink",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freeTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedAffiliates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedAffiliates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "giveReview",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "image", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "makeTransaction",
    values: [BigNumberish[], BigNumberish[], string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeAffiliate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedAffArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedAffiliates",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "selfDestruct",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeTransactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setItemLink",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "shopId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionsCount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "affiliates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedAffArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteItem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchCatalogItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchItemLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freeTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedAffiliates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedAffiliates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "giveReview", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "image", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeAffiliate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedAffArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedAffiliates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfDestruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreeTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setItemLink",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shopId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionsCount",
    data: BytesLike
  ): Result;

  events: {
    "ItemCreated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemCreated"): EventFragment;
}

export type ItemCreatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { itemId: BigNumber; price: BigNumber }
>;

export type ItemCreatedEventFilter = TypedEventFilter<ItemCreatedEvent>;

export interface Shop extends BaseContract {
  contractName: "Shop";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ShopInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    affiliates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        percentage: BigNumber;
        affAddr: string;
        id: BigNumber;
      }
    >;

    approveAffiliate(
      affAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approvedAffArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        percentage: BigNumber;
        affAddr: string;
        id: BigNumber;
      }
    >;

    cancelAffiliate(
      affAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createItem(
      _price: BigNumberish,
      _filePath: string,
      _tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteItem(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchCatalogItems(overrides?: CallOverrides): Promise<[ItemStructOutput[]]>;

    fetchItemLink(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    fetchTransactions(
      overrides?: CallOverrides
    ): Promise<[Shop.TransStructOutput[]]>;

    freeTransactions(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApprovedAffiliates(
      overrides?: CallOverrides
    ): Promise<[Shop.AffiliateStructOutput[]]>;

    getProposedAffiliates(
      overrides?: CallOverrides
    ): Promise<[Shop.AffiliateStructOutput[]]>;

    giveReview(
      stars: BigNumberish,
      transId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    image(overrides?: CallOverrides): Promise<[string]>;

    makeTransaction(
      itemIds: BigNumberish[],
      itemQty: BigNumberish[],
      affAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposeAffiliate(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposedAffArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        percentage: BigNumber;
        affAddr: string;
        id: BigNumber;
      }
    >;

    proposedAffiliates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        percentage: BigNumber;
        affAddr: string;
        id: BigNumber;
      }
    >;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFreeTransactions(
      _freeTransactions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setItemLink(
      _itemId: BigNumberish,
      _fileLink: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shopId(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, string, BigNumber, boolean, BigNumber] & {
        transId: BigNumber;
        total: BigNumber;
        isValid: boolean;
        client: string;
        review: BigNumber;
        isReviewed: boolean;
        affPercentage: BigNumber;
      }
    >;

    transactionsCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;
  };

  affiliates(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      percentage: BigNumber;
      affAddr: string;
      id: BigNumber;
    }
  >;

  approveAffiliate(
    affAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approvedAffArr(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      percentage: BigNumber;
      affAddr: string;
      id: BigNumber;
    }
  >;

  cancelAffiliate(
    affAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createItem(
    _price: BigNumberish,
    _filePath: string,
    _tokenURI: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteItem(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchCatalogItems(overrides?: CallOverrides): Promise<ItemStructOutput[]>;

  fetchItemLink(
    _itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  fetchTransactions(
    overrides?: CallOverrides
  ): Promise<Shop.TransStructOutput[]>;

  freeTransactions(overrides?: CallOverrides): Promise<BigNumber>;

  getApprovedAffiliates(
    overrides?: CallOverrides
  ): Promise<Shop.AffiliateStructOutput[]>;

  getProposedAffiliates(
    overrides?: CallOverrides
  ): Promise<Shop.AffiliateStructOutput[]>;

  giveReview(
    stars: BigNumberish,
    transId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  image(overrides?: CallOverrides): Promise<string>;

  makeTransaction(
    itemIds: BigNumberish[],
    itemQty: BigNumberish[],
    affAddr: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposeAffiliate(
    percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposedAffArr(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      percentage: BigNumber;
      affAddr: string;
      id: BigNumber;
    }
  >;

  proposedAffiliates(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber] & {
      percentage: BigNumber;
      affAddr: string;
      id: BigNumber;
    }
  >;

  selfDestruct(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFreeTransactions(
    _freeTransactions: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setItemLink(
    _itemId: BigNumberish,
    _fileLink: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shopId(overrides?: CallOverrides): Promise<BigNumber>;

  transactions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, string, BigNumber, boolean, BigNumber] & {
      transId: BigNumber;
      total: BigNumber;
      isValid: boolean;
      client: string;
      review: BigNumber;
      isReviewed: boolean;
      affPercentage: BigNumber;
    }
  >;

  transactionsCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    affiliates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        percentage: BigNumber;
        affAddr: string;
        id: BigNumber;
      }
    >;

    approveAffiliate(affAddr: string, overrides?: CallOverrides): Promise<void>;

    approvedAffArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        percentage: BigNumber;
        affAddr: string;
        id: BigNumber;
      }
    >;

    cancelAffiliate(affAddr: string, overrides?: CallOverrides): Promise<void>;

    createItem(
      _price: BigNumberish,
      _filePath: string,
      _tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteItem(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    fetchCatalogItems(overrides?: CallOverrides): Promise<ItemStructOutput[]>;

    fetchItemLink(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    fetchTransactions(
      overrides?: CallOverrides
    ): Promise<Shop.TransStructOutput[]>;

    freeTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    getApprovedAffiliates(
      overrides?: CallOverrides
    ): Promise<Shop.AffiliateStructOutput[]>;

    getProposedAffiliates(
      overrides?: CallOverrides
    ): Promise<Shop.AffiliateStructOutput[]>;

    giveReview(
      stars: BigNumberish,
      transId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    image(overrides?: CallOverrides): Promise<string>;

    makeTransaction(
      itemIds: BigNumberish[],
      itemQty: BigNumberish[],
      affAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposeAffiliate(
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedAffArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        percentage: BigNumber;
        affAddr: string;
        id: BigNumber;
      }
    >;

    proposedAffiliates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber] & {
        percentage: BigNumber;
        affAddr: string;
        id: BigNumber;
      }
    >;

    selfDestruct(overrides?: CallOverrides): Promise<void>;

    setFreeTransactions(
      _freeTransactions: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setItemLink(
      _itemId: BigNumberish,
      _fileLink: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shopId(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, string, BigNumber, boolean, BigNumber] & {
        transId: BigNumber;
        total: BigNumber;
        isValid: boolean;
        client: string;
        review: BigNumber;
        isReviewed: boolean;
        affPercentage: BigNumber;
      }
    >;

    transactionsCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ItemCreated(uint256,uint256)"(
      itemId?: null,
      price?: null
    ): ItemCreatedEventFilter;
    ItemCreated(itemId?: null, price?: null): ItemCreatedEventFilter;
  };

  estimateGas: {
    affiliates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    approveAffiliate(
      affAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approvedAffArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAffiliate(
      affAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createItem(
      _price: BigNumberish,
      _filePath: string,
      _tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteItem(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchCatalogItems(overrides?: CallOverrides): Promise<BigNumber>;

    fetchItemLink(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    freeTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    getApprovedAffiliates(overrides?: CallOverrides): Promise<BigNumber>;

    getProposedAffiliates(overrides?: CallOverrides): Promise<BigNumber>;

    giveReview(
      stars: BigNumberish,
      transId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    image(overrides?: CallOverrides): Promise<BigNumber>;

    makeTransaction(
      itemIds: BigNumberish[],
      itemQty: BigNumberish[],
      affAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposeAffiliate(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposedAffArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposedAffiliates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFreeTransactions(
      _freeTransactions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setItemLink(
      _itemId: BigNumberish,
      _fileLink: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shopId(overrides?: CallOverrides): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionsCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    affiliates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveAffiliate(
      affAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approvedAffArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAffiliate(
      affAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createItem(
      _price: BigNumberish,
      _filePath: string,
      _tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteItem(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchCatalogItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchItemLink(
      _itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchTransactions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freeTransactions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApprovedAffiliates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposedAffiliates(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    giveReview(
      stars: BigNumberish,
      transId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    image(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeTransaction(
      itemIds: BigNumberish[],
      itemQty: BigNumberish[],
      affAddr: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeAffiliate(
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposedAffArr(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposedAffiliates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    selfDestruct(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFreeTransactions(
      _freeTransactions: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setItemLink(
      _itemId: BigNumberish,
      _fileLink: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shopId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionsCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
